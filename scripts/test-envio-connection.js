#!/usr/bin/env node

/**
 * Script para probar la conexi√≥n con Envio HyperSync
 * Uso: node scripts/test-envio-connection.js
 */

const ENVIO_ENDPOINT = 'https://indexer.envio.dev'
const ENVIO_API_KEY = '48a3acc9-9ca5-4734-84f5-c260fd8ec3f1'

async function testEnvioConnection() {
  console.log('üîç Probando conexi√≥n con Envio HyperSync...\n')
  
  try {
    // Query de prueba para verificar la conexi√≥n
    const testQuery = `
      query TestConnection {
        __schema {
          types {
            name
          }
        }
      }
    `
    
    console.log('üì° Conectando a:', ENVIO_ENDPOINT)
    console.log('üîë Usando API Key:', ENVIO_API_KEY.substring(0, 8) + '...')
    
    const response = await fetch(`${ENVIO_ENDPOINT}/graphql`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${ENVIO_API_KEY}`
      },
      body: JSON.stringify({ query: testQuery })
    })
    
    const data = await response.json()
    
    if (data.errors) {
      console.log('‚ùå Error en la conexi√≥n:')
      console.log(JSON.stringify(data.errors, null, 2))
      return false
    }
    
    console.log('‚úÖ Conexi√≥n exitosa!')
    console.log('üìä Tipos disponibles:', data.data?.__schema?.types?.length || 0)
    
    // Probar query espec√≠fica para Monad
    console.log('\nüîç Probando query espec√≠fica para Monad...')
    
    const monadQuery = `
      query GetMonadData {
        transactions(
          where: { network: "monad-testnet" }
          first: 5
        ) {
          id
          hash
          from
          to
          value
          timestamp
        }
      }
    `
    
    const monadResponse = await fetch(`${ENVIO_ENDPOINT}/graphql`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${ENVIO_API_KEY}`
      },
      body: JSON.stringify({ query: monadQuery })
    })
    
    const monadData = await monadResponse.json()
    
    if (monadData.errors) {
      console.log('‚ö†Ô∏è  Query de Monad fall√≥ (puede ser normal si no hay datos):')
      console.log(JSON.stringify(monadData.errors, null, 2))
    } else {
      console.log('‚úÖ Query de Monad exitosa!')
      console.log('üìä Transacciones encontradas:', monadData.data?.transactions?.length || 0)
    }
    
    return true
    
  } catch (error) {
    console.log('‚ùå Error de conexi√≥n:')
    console.log(error.message)
    return false
  }
}

async function testLocalAPI() {
  console.log('\nüîç Probando API local...\n')
  
  try {
    const response = await fetch('http://localhost:3000/api/envio/test')
    const data = await response.json()
    
    if (data.success) {
      console.log('‚úÖ API local funcionando!')
      console.log('üìä Datos:', data.data)
    } else {
      console.log('‚ùå API local fall√≥:')
      console.log(data.error)
    }
    
    return data.success
    
  } catch (error) {
    console.log('‚ùå No se pudo conectar a la API local (aseg√∫rate de que el servidor est√© corriendo)')
    console.log(error.message)
    return false
  }
}

async function main() {
  console.log('üöÄ Test de Integraci√≥n Envio HyperSync\n')
  console.log('=' .repeat(50))
  
  const envioSuccess = await testEnvioConnection()
  const localSuccess = await testLocalAPI()
  
  console.log('\n' + '=' .repeat(50))
  console.log('üìã Resumen:')
  console.log(`Envio HyperSync: ${envioSuccess ? '‚úÖ Conectado' : '‚ùå Fall√≥'}`)
  console.log(`API Local: ${localSuccess ? '‚úÖ Funcionando' : '‚ùå Fall√≥'}`)
  
  if (envioSuccess) {
    console.log('\nüéâ ¬°Integraci√≥n con Envio HyperSync exitosa!')
    console.log('üí° El dashboard puede usar datos reales de Monad blockchain')
  } else {
    console.log('\n‚ö†Ô∏è  La integraci√≥n con Envio fall√≥, pero el dashboard funcionar√° con datos simulados')
  }
}

if (require.main === module) {
  main().catch(console.error)
}

module.exports = { testEnvioConnection, testLocalAPI }
